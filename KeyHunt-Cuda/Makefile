#---------------------------------------------------------------------
# Makefile for CryptoHuntCuda 
# Author : Modified for tusarr10 project
# Added support for Settings, StatusWriter, SystemMonitor, Updatestatus
# Cross-platform compatible (Linux & Windows)
#---------------------------------------------------------------------

# To build with GPU support, use:
#    make gpu=1
# To build with debug symbols, use:
#    make debug=1
# To clean up object files, use:
#    make clean

#---------------------------------------------------------------------

SRC = Base58.cpp IntGroup.cpp Main.cpp Bloom.cpp Random.cpp \
      Timer.cpp Int.cpp IntMod.cpp Point.cpp SECP256K1.cpp \
      KeyHunt.cpp GPU/GPUGenerate.cpp hash/ripemd160.cpp \
      hash/sha256.cpp hash/sha512.cpp hash/ripemd160_sse.cpp \
      hash/sha256_sse.cpp hash/keccak160.cpp GmpUtil.cpp \
      CmdParse.cpp Bech32.cpp \
      TelegramAlert.cpp Settings.cpp StatusWriter.cpp \
      SystemMonitor.cpp Updatestatus.cpp   # âœ… Added new source files here

OBJDIR = obj

ifdef gpu
OBJET = $(addprefix $(OBJDIR)/, \
        Base58.o IntGroup.o Main.o Bloom.o Random.o Timer.o Int.o \
        IntMod.o Point.o SECP256K1.o KeyHunt.o GPU/GPUGenerate.o \
        hash/ripemd160.o hash/sha256.o hash/sha512.o \
        hash/ripemd160_sse.o hash/sha256_sse.o hash/keccak160.o \
        GPU/GPUEngine.o \
        GmpUtil.o CmdParse.o Bech32.o TelegramAlert.o \
        Settings.o StatusWriter.o SystemMonitor.o Updatestatus.o)  # âœ… Added new objects here
else
OBJET = $(addprefix $(OBJDIR)/, \
        Base58.o IntGroup.o Main.o Bloom.o Random.o Timer.o Int.o \
        IntMod.o Point.o SECP256K1.o KeyHunt.o GPU/GPUGenerate.o \
        hash/ripemd160.o hash/sha256.o hash/sha512.o \
        hash/ripemd160_sse.o hash/sha256_sse.o hash/keccak160.o \
        GmpUtil.o CmdParse.o Bech32.o TelegramAlert.o \
        Settings.o StatusWriter.o SystemMonitor.o Updatestatus.o)  # âœ… Added new objects here
endif

CXX        = g++
CUDA       = /usr/local/cuda-11.4
CXXCUDA    = /usr/bin/g++
NVCC       = $(CUDA)/bin/nvcc

# --------------------------------------------------------------------
# Local GMP include path (inside repo)
LOCAL_GMP  = gmp/include

# Universal GPU architecture support (Kepler â†’ Ada + PTX fallback)
GENCODE   = \
  -gencode=arch=compute_35,code=sm_35 \
  -gencode=arch=compute_52,code=sm_52 \
  -gencode=arch=compute_61,code=sm_61 \
  -gencode=arch=compute_75,code=sm_75 \
  -gencode=arch=compute_86,code=sm_86

# --------------------------------------------------------------------

ifdef gpu
ifdef debug
CXXFLAGS   = -DWITHGPU -m64 -mssse3 -Wno-write-strings -g \
             -I. -I$(CUDA)/include -I$(LOCAL_GMP)
else
CXXFLAGS   = -DWITHGPU -m64 -mssse3 -Wno-write-strings -O2 \
             -I. -I$(CUDA)/include -I$(LOCAL_GMP)
endif
LFLAGS     = -lgmp -lpthread -L$(CUDA)/lib64 -lcudart   # âœ… Removed -lcurl, not needed
else
ifdef debug
CXXFLAGS   = -m64 -mssse3 -Wno-write-strings -g \
             -I. -I$(CUDA)/include -I$(LOCAL_GMP)
else
CXXFLAGS   = -m64 -mssse3 -Wno-write-strings -O2 \
             -I. -I$(CUDA)/include -I$(LOCAL_GMP)
endif
LFLAGS     = -lgmp -lpthread   # âœ… Removed -lcurl, not needed
endif

# --------------------------------------------------------------------
# GPU object compilation
ifdef gpu
$(OBJDIR)/GPU/GPUEngine.o: GPU/GPUEngine.cu
	$(NVCC) -maxrregcount=0 --ptxas-options=-v --compile \
	--compiler-options -fPIC -ccbin $(CXXCUDA) -m64 -O2 \
	-I$(CUDA)/include -I$(LOCAL_GMP) $(GENCODE) \
	-o $(OBJDIR)/GPU/GPUEngine.o -c GPU/GPUEngine.cu
endif

# Generic object compilation
$(OBJDIR)/%.o : %.cpp
	$(CXX) $(CXXFLAGS) -o $@ -c $<

# Build all
all: CryptoHuntCuda

CryptoHuntCuda: $(OBJET)
	@echo "ðŸš€ Building CryptoHuntCuda..."
	$(CXX) $(OBJET) $(LFLAGS) -o CryptoHuntCuda

# Ensure directories exist
$(OBJET): | $(OBJDIR) $(OBJDIR)/GPU $(OBJDIR)/hash

$(OBJDIR):
ifeq ($(OS),Windows_NT)
	@mkdir $(OBJDIR) 2> NUL || true
else
	@mkdir -p $(OBJDIR)
endif

$(OBJDIR)/GPU: $(OBJDIR)
ifeq ($(OS),Windows_NT)
	cd $(OBJDIR) && mkdir GPU 2> NUL || true
else
	cd $(OBJDIR) && mkdir -p GPU
endif

$(OBJDIR)/hash: $(OBJDIR)
ifeq ($(OS),Windows_NT)
	cd $(OBJDIR) && mkdir hash 2> NUL || true
else
	cd $(OBJDIR) && mkdir -p hash
endif

# Clean up
clean:
	@echo "ðŸ§¹ Cleaning..."
	@rm -f $(OBJDIR)/*.o
	@rm -f $(OBJDIR)/GPU/*.o
	@rm -f $(OBJDIR)/hash/*.o
	@rm -f CryptoHuntCuda

# ---------------------------------------------------------------------
# âœ… Summary of Changes:
# 1. Added new source files to SRC: Settings.cpp, StatusWriter.cpp, SystemMonitor.cpp, Updatestatus.cpp
# 2. Added corresponding object files to OBJET for compilation/linking
# 3. Removed -lcurl from LFLAGS since curl is not used
# 4. Comments added to track changes clearly
# 5. Maintained GPU/non-GPU and debug/release builds
# 6. Directory creation for obj, obj/GPU, obj/hash ensured cross-platform
# ---------------------------------------------------------------------
